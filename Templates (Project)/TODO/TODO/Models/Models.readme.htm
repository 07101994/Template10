<!DOCTYPE html>

<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>Template10</title>
</head>
<body style="font-family: 'Segoe UI'; margin: 20px auto 20px auto; width: 500px;" >
    <h3>Template 10</h3>
    <h1>The Models folder</h1>
    <ul>Models are simple classes that hold data. It is very unusual that a Model has any other functionality (methods or events).</ul>
    <p>
        Most applications use data. It could be a User profile or a Todo item. The record can be persisted in a database or
        a file - that is up to the developer. But software needs to represent data as a [class]. It could be in a User 
        class or a Todo [class]. This [class] structure is the only way an application can use data. It is the only way it
        can be loaded into memory. It is up to the developer to figure out how to take the data from their database or
        file and fill the [class]. 
    </p>
    <p>
        Frameworks like Entity Framework can take a database record and put it in a [class]. Other technologies, like
        JSON deserialization can take the JSON emitted by a REST service (which is only a string) and populate a [class]
        with it. Whatever method a developer chooses does not matter, data just needs to be represented as a [class].
    </p>
    <h2>INotifyPropertyChanged</h2>
    <p>
        In XAML data binding, developers can bind properties of a [UIElement] to a Model (which is a [class]).
        The data binding framework recognizes a [class] and knows how to read its properties and present their values
        in the user interface. For example, a developer might data bind the FirstName property of the User [class] to
        the [Text] property of a XAML [TextBlock]. This would present the FirstName to in the user interface.
    </p>
    <h2>This folder</h2>
    <p>
        This folder holds the models that represent data in the application. Typically, even when a database is not
        the backend store, the models tend to look like database tables. 
    </p>
    <h2>IValueConverter</h2>
    <p>
        A XAML Value Converter is just a C# class. It must implment [IValueConverter], which may be found in the 
        [Windows.UI.Xaml.Data] namespace. This interface requires the [Convert] and the [ConvertBack] methods,
        though most converters do not implement the [ConvertBack] method. This is generally because they are
        [readonly] operations; the [ConvertBack] method is only used when writing back to a property which is
        an uncommon scenario for a value converter.
    </p>
    <p>
        When XAML binds a property, it follows this process: 
        <ol>
            <li>Read the property</li>
            <li>Apply the default Value Converter</li>
            <li>Present the result</li>
        </ol>
        With a Custom Value Converter, it follows this process: 
        <ol>
            <li>Read the property</li>
            <li>Pass the property value through the Custom Value Converter's [Convert] method</li>
            <li>Present the result</li>
        </ol>
        This ability to inject into the presentation pipeline gives the developer 
        considerable control over the presentation of data.
    </p>
    <h2>Performance Caveat</h2>
    <p>
        Value Converters, like any executing code, have a cost to process. As a result, it is generally not recommended
        to use Custom Value Converters in repeating data, especially when the quantity of data is quite high. The reason
        for this is that the Value Converter has to be instantiated for each item and creates a binding performance penalty. 
    </p>
    <p>
        Sometimes a value in repeating data needs to be converted before it is displayed. If this is the case, creating
        a new property in the [Model] that handles the formatting is far more cost effective than using a Value Converter.
        For example, you might have the property <span style="font-family: 'Courier New';">DateTime DueDate</span> but 
        will also create a companion, [readonly] property called <span style="font-family: 'Courier New';"> String DueDateFormatted</span>.
        The C# syntax is nearly the same as the Value Converter. The developer simply trades the reusability 
        and declarability of a Value Converter for improved (or maintained) performance.
    </p>
    <h3>End</h3>
</body>
</html>